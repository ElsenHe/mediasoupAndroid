package com.versatica.mediasoup

import com.versatica.mediasoup.handlers.sdp.*
import org.webrtc.RTCStats

/**
 * mediasoup protocol
 * List of messages (requests/responses/notifications) that must be exchanged between client
 * and server side of the mediasoup based application. No signaling protocol is provided but
 * just message payloads. The application is responsible of sending and receiving these messages.
 */


/**
 * From client to server
 * Messages generated by the client-side `Room` instance that must be given to the corresponding server-side
 * `Room` or `Peer` instance (depending on the `target` field).
 */

//queryRoom [request]
class QueryRoomRequest{
    val method: String = "queryRoom"
    val target : String = "room"
}

class QueryRoomResponse {
    var rtpCapabilities: RTCRtpCapabilities? = null
    var mandatoryCodecPayloadTypes: MutableList<Int> = mutableListOf()
}

//join [request]
class JoinRequest{
    val method: String = "join"
    val target : String = "room"
    var peerName: String? = null
    var rtpCapabilities: RTCRtpCapabilities? = null
    var spy: Boolean = false
    var appData: Any? = null
}

class JoinResponse{
    var peers: ArrayList<PeerData> = ArrayList()
}

class PeerData{
    var name: String? = ""
    var consumers: ArrayList<ConsumerData> = ArrayList()
    var appData: Any? = null
}

class ConsumerData{
    var id: Int = 0
    var kind: String = ""
    var rtpParameters: RTCRtpParameters = RTCRtpParameters()
    var paused: Boolean = false
    var appData: Any? = null
}

//leave [notification]
class LeaveNotification{
    val method: String = "join"
    val target : String = "peer"
    var notification: Boolean = true
    var appData: Any? = null
}

//createTransport [request]
class CreateTransportRequest {
    val method: String = "createTransport"
    val target: String = "peer"
    var id: Int = 0
    var direction: String? = null
    var options: TransportOptions? = null
    var appData: Any? = null
    var dtlsParameters: RTCDtlsParameters? = null
}

typealias CreateTransportResponse = TransportRemoteIceParameters

//updateTransport [notification]
class UpdateTransportNotification{
    val method: String = "updateTransport"
    val target : String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var dtlsParameters: RTCDtlsParameters? = null
}

//restartTransport [request]
class RestartTransportRequest{
    val method: String = "restartTransport"
    val target: String = "peer"
    var id: Int = 0
}

class RestartTransportResponse{
    var iceParameters: RTCIceParameters? = null
}

//closeTransport [notification]
class CloseTransportNotify{
    val method: String = "closeTransport"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//enableTransportStats [notification]
class EnableTransportStatsNotify{
    val method: String = "enableTransportStats"
    val target: String = "peer"
    var id: Int = 0
    var interval: Int = 0
}

//disableTransportStats [notification]
class DisableTransportStatsNotify{
    val method: String = "disableTransportStats"
    val target: String = "peer"
    var id: Int = 0
}

//createProducer [request]
class CreateProducerRequest{
    val method: String = "createProducer"
    val target: String = "peer"
    var id: Int = 0
    var kind: String? = null
    var transportId: Int = 0
    var rtpParameters: RTCRtpParameters? = null
    var paused: Boolean = false
    var appData: Any? = null
}

class CreateProducerResponse{
}

//updateProducer [notification]
class updateProducerNotify {
    val method: String = "updateProducer"
    val target: String = "peer"
    var id: Int = 0
    var rtpParameters: RTCRtpParameters? = null
}

//pauseProducer [notification]
class PauseProducerNotify {
    val method: String = "pauseProducer"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//resumeProducer [notification]
class ResumeProducerNotify {
    val method: String = "resumeProducer"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//closeProducer [notification]
class CloseProducerNotify {
    val method: String = "closeProducer"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//enableProducerStats [notification]
class EnableProducerStatsNotify {
    val method: String = "enableProducerStats"
    val target: String = "peer"
    var id: Int = 0
    var interval: Int = 0
}

//disableProducerStats [notification]
class DisableProducerStatsNotify {
    val method: String = "disableProducerStats"
    val target: String = "peer"
    var id: Int = 0
}

//enableConsumer [request]
class EnableConsumerRequest {
    val method: String = "enableConsumer"
    val target: String = "peer"
    var id: Int = 0
    var transportId: Int = 0
    var paused: Boolean = false
    var preferredProfile: String? = null
}

class EnableConsumerResponse{
    var paused: Boolean = false
    var preferredProfile: String? = null
    var effectiveProfile: String? = "default"
}

//pauseConsumer [notification]
class PauseConsumerNotify {
    val method: String = "pauseConsumer"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//resumeConsumer [notification]
class ResumeConsumerNotify {
    val method: String = "resumeConsumer"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//setConsumerPreferredProfile [notification]
class SetConsumerPreferredProfileNotify {
    val method: String = "setConsumerPreferredProfile"
    val target: String = "peer"
    var id: Int = 0
    var profile: String? = null
}

//enableConsumerStats [notification]
class EnableConsumerStatsNotify {
    val method: String = "enableConsumerStats"
    val target: String = "peer"
    var id: Int = 0
    var interval: Int = 0
}

//disableConsumerStats [notification]
class DisableConsumerStatsNotify {
    val method: String = "disableConsumerStats"
    val target: String = "peer"
    var id: Int = 0
}

/**
 * From server to client
 * Messages generated by the server-side `Peer` instance that must be given to the client-side `Room` instance.
 */

//closed [notification]
class ClosedNotify {
    val method: String = "closed"
    val target: String = "peer"
    var notification: Boolean = true
    var appData: Any? = null
}

//transportClosed [notification]
class TransportClosedNotify {
    val method: String = "transportClosed"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//transportStats [notification]
class TransportStatsNotify {
    val method: String = "transportStats"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var stats: ArrayList<RTCTransportStats> = ArrayList()
}

//producerResumed [notification]
class ProducerResumedNotify {
    val method: String = "producerResumed"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//producerClosed [notification]
class ProducerClosedNotify {
    val method: String = "producerClosed"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var appData: Any? = null
}

//producerStats [notification]
class ProducerStatsNotify {
    val method: String = "producerStats"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var stats: ArrayList<RTCTransportStats> = ArrayList()
}

//newPeer [notification]
class NewPeerNotify {
    val method: String = "newPeer"
    val target: String = "peer"
    var notification: Boolean = true
    var name: String = ""
    var consumers: ArrayList<ConsumerData> = ArrayList()
    var appData: Any? = null
}

//peerClosed [notification]
class PeerClosedNotify {
    val method: String = "peerClosed"
    val target: String = "peer"
    var notification: Boolean = true
    var name: String = ""
    var appData: Any? = null
}

//newConsumer [notification]
class NewConsumerNotify{
    val method: String = "newConsumer"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    var kind: String? = ""
    var peerName: String? = ""
    var rtpParameters: RTCRtpParameters? = null
    var paused: Boolean? = false
    var preferredProfile: String? = null
    var effectiveProfile: String? = "default"
    var appData: Any? = null
}

//consumerPaused [notification]
class ConsumerPausedNotify {
    val method: String = "consumerPaused"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    val peerName: String = ""
    var appData: Any? = null
}

//consumerResumed [notification]
class ConsumerResumedNotify {
    val method: String = "consumerResumed"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    val peerName: String = ""
    var appData: Any? = null
}

//consumerPreferredProfileSet [notification]
class ConsumerPreferredProfileSetNotify {
    val method: String = "consumerPreferredProfileSet"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    val peerName: String = ""
    var profile: String? = null
}

//consumerEffectiveProfileChanged [notification]
class ConsumerEffectiveProfileChangedNotify {
    val method: String = "consumerEffectiveProfileChanged"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    val peerName: String = ""
    var profile: String? = null
}

//consumerStats [notification]
class ConsumerStatsNotify {
    val method: String = "consumerStats"
    val target: String = "peer"
    var notification: Boolean = true
    var id: Int = 0
    val stats: ArrayList<RTCTransportStats> = ArrayList()
}





